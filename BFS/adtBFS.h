#pragma config(Sensor, S1,     touchSensor,    sensorEV3_Touch)
#pragma config(Sensor, S2,     gyroSensor,     sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Sensor, S3,     colorSensor,    sensorEV3_Color, modeEV3Color_Color)
#pragma config(Motor,  motorA,          armMotor,      tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          leftMotor,     tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          rightMotor,    tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#ifndef adtBFS_h
#define adtBFS_h

typedef struct {
	long arrDG[4];
	long currDG;
	int friend[4];
	int connectedWith;
	int indexJalur;
}Mem;
/** Struktur memory
*	arrDG menyimpan besar sudut gyro dari jalur yang dimiliki sebuah persimpangan
* currDG menyimpan besar sudut yang dipilih robot
* friend menyimpan index node berikutnya yang menjadi target robot
* connectedWith menyimpan index node sebelumnya
* indexJalur menyimpan indeks array dari arrDG (0, 1, 2, 3)
*/

void Start();
	// prosedur untuk masuk garis awal
void getSimpang(Mem& m);
	// prosedur mencari jalur yang dimiliki sebuah simpangan
int gotonextline(Mem& m);
	// memilih simpangan yang akan dilewati berikutnya
	// jika ada jalan yang belum dilewati, return 1
	// jika semua cabang sudah dilewati, return 0
int LineFollow(int &counterBlue);
	// line follower, jika hitam dan putih
	// jika warna biru (Finish / Start) >> return 1
	// jika warna hijau ( simpangan ) >> return 2
	// jika warna merah ( Buntu) >> return 3
void gotofirst(Mem &m, int jn, int &isBlue);
	// prosedur untuk kembali ke kotak start setelah sampai di kotak finish
void goback();
	//bertemu jalan buntu
	//kembali ke node sebelumnya
void SolveBFS();
	// prosedur mencari kotak finish dimulai dari kotak start

#endif
