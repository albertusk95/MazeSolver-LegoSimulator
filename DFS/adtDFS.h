#pragma config(Sensor, S1,     touchSensor,    sensorEV3_Touch)
#pragma config(Sensor, S2,     gyroSensor,     sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Sensor, S3,     colorSensor,    sensorEV3_Color, modeEV3Color_Color)
#pragma config(Motor,  motorA,          armMotor,      tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          leftMotor,     tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          rightMotor,    tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//file: adtDFS.h

//HEADER dari AlgoDFS

#ifndef adtDFS_h
#define adtDFS_h

typedef struct {
	long arrDG[4];
	long currDG;
}Mem;
/*
	Mem akan menyimpan besar sudut setiap jalur yang dimiliki oleh sebuah simpangan
	Besar sudut disimpan di array arrDG
	currDG akan menyimpan besar sudut yang dipilih robot
*/

/*
	basic function untuk di node(kotak hijau,biru,merah)
	basic funcion untuk memilih jalur dan memposisikan robot di jalur sebelum perintah LineFollow()
	untuk pindah kotak menggunakan LineFollow(), yaitu mengikuti garis
*/
void Start();
	// memulai untuk masuk ke jalur pertama kali
void getSimpang(Mem& m);
	// mencari simpangan yang ada
int gotonextline(Mem& m);
	// memilih simpangan yang akan dilewati berikutnya
	// jika ada jalan yang belum dilewati, return 1
	// jika semua cabang sudah dilewati, return 0
void goback();
	// bertemu jalan buntu
	// kembali ke node sebelumnya
int LineFollow(int &counterBlue);
	// line follower, jika hitam dan putih
	// jika warna biru (Finish / Start) >> return 1
	// jika warna hijau ( simpangan ) >> return 2
	// jika warna merah ( Buntu) >> return 3
void gotofirst(Mem &m, int jn);
	// prosedur untuk kembali ke kotak start setelah sampai di kotak finish
void gobacktrack(Mem &m);
	// kembali ke simpangan sebelumnya
void SolveDFS();
	// prosedur mencari kotak finish dimulai dari kotak start

#endif
